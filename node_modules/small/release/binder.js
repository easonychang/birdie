"use strict";
var node_1 = require("./node");
var Binder = (function () {
    function Binder(files) {
        this.files = files;
        for (var _i = 0, _a = this.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.bindFile(file);
        }
        for (var _b = 0, _c = this.files; _b < _c.length; _b++) {
            var file = _c[_b];
            for (var _d = 0, _e = file.exportNodes; _d < _e.length; _d++) {
                var node = _e[_d];
                this.bindExport(node);
            }
        }
        for (var _f = 0, _g = this.files; _f < _g.length; _f++) {
            var file = _g[_f];
            for (var _h = 0, _j = file.importNodes; _h < _j.length; _h++) {
                var node = _j[_h];
                this.bindImport(node);
                if (!node.targetFile)
                    continue; // global module
                if (file.dependencies.indexOf(node.targetFile) === -1) {
                    file.dependencies.push(node.targetFile);
                }
                if (node.targetFile.dependants.indexOf(file) === -1) {
                    node.targetFile.dependants.push(file);
                }
            }
        }
    }
    Binder.prototype.bindFile = function (file) {
        for (var _i = 0, _a = file.importNodes; _i < _a.length; _i++) {
            var importNode = _a[_i];
            importNode.file = file;
            for (var _b = 0, _c = importNode.references; _b < _c.length; _b++) {
                var reference = _c[_b];
                reference.file = file;
            }
        }
        for (var _d = 0, _e = file.exportNodes; _d < _e.length; _d++) {
            var exportNode = _e[_d];
            exportNode.file = file;
        }
    };
    Binder.prototype.findExports = function (file, name) {
        var nodes = [];
        for (var _i = 0, _a = file.exportNodes; _i < _a.length; _i++) {
            var exportNode = _a[_i];
            if (exportNode.name === name) {
                nodes.push(exportNode);
            }
        }
        return nodes;
    };
    Binder.prototype.findExportedBinding = function (file, name) {
        for (var _i = 0, _a = file.exportNodes; _i < _a.length; _i++) {
            var exportNode = _a[_i];
            if (exportNode.name === name) {
                return exportNode.binding;
            }
        }
        return undefined;
    };
    Binder.prototype.bindExport = function (node) {
        if (node.binding)
            return;
        var all = this.findExports(node.file, node.name);
        if (node.assignmentValue && !node.compoundAssignment) {
        }
        var binding = new node_1.Binding(all);
        for (var _i = 0, all_1 = all; _i < all_1.length; _i++) {
            var exportNode = all_1[_i];
            exportNode.binding = binding;
        }
    };
    Binder.prototype.bindImport = function (node) {
        if (node.targetFile === undefined)
            return;
        var binding = this.findExportedBinding(node.targetFile, node.dotArray[0]);
        if (binding) {
            node.binding = binding;
            for (var _i = 0, _a = node.references; _i < _a.length; _i++) {
                var reference = _a[_i];
                reference.binding = binding;
            }
        }
    };
    return Binder;
}());
exports.Binder = Binder;
