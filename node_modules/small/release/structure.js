"use strict";
function findCommonParent(files) {
    if (files.length === 0)
        return {
            parent: undefined,
            level: 0
        };
    var parent = files[0];
    var parentParents;
    var setParentParents = function () {
        parentParents = [];
        var p = parent;
        while (p) {
            parentParents.push(p);
            p = p.structureParent;
        }
    };
    setParentParents();
    for (var i = 1; i < files.length; ++i) {
        var f = files[i];
        var p = f;
        while (p) {
            var ind = parentParents.indexOf(p);
            if (ind === -1) {
                p = p.structureParent;
            }
            else {
                parent = p;
                setParentParents();
                break;
            }
        }
    }
    return {
        parent: parent,
        level: parentParents.length
    };
}
function generateStructure(proj) {
    var files = proj.orderFiles;
    for (var i = files.length - 1; i >= 0; --i) {
        var f = files[i];
        var dependants = void 0;
        if (f.hasCircularDependencies) {
            dependants = (_a = f.connectedComponent).concat.apply(_a, f.connectedComponent.map(function (file) { return file.dependants; }));
        }
        else {
            dependants = f.dependants;
        }
        var commonParent = findCommonParent(dependants.filter(function (item) {
            return item.orderIndex > i;
        }));
        f.structureParent = commonParent.parent;
        f.structureLevel = commonParent.level;
        if (f.structureParent)
            f.structureParent.structureChildren.splice(0, 0, f);
    }
    for (var i = 0; i < files.length; ++i) {
        var f = files[i];
        f.structureAllChildren = f.structureChildren;
        f.structureChildren.forEach(function (other) {
            f.structureAllChildren = f.structureAllChildren.concat(other.structureAllChildren);
        });
    }
    for (var i = 0; i < files.length; ++i) {
        var f = files[i];
        f.structureDependencies = [];
        f.dependencies.forEach(function (dep) {
            if (f.structureAllChildren.indexOf(dep) === -1) {
                f.structureDependencies.push(dep);
            }
        });
        f.structureChildren.forEach(function (other) {
            other.structureDependencies.forEach(function (dep) {
                if (f.structureDependencies.indexOf(dep) === -1 && f.structureAllChildren.indexOf(dep) === -1) {
                    f.structureDependencies.push(dep);
                }
            });
        });
    }
    var _a;
}
exports.generateStructure = generateStructure;
