/// <reference path="../definitions/ref.d.ts" />
"use strict";
var path = require("path");
var Promise = require("bluebird");
var browserBuiltins = require("browser-builtins");
function resolve(proj, from, ref) {
    var resolver = new Resolver(proj.io, proj.options);
    resolver.resolve(ref, from);
    return resolver.value;
}
exports.resolve = resolve;
var Resolver = (function () {
    function Resolver(ioHost, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.options = options;
        this.io = ioHost;
        this.value = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Resolver.prototype.resolve = function (str, from) {
        var _this = this;
        this.str = str;
        this.from = from;
        if (this.options.includeNode && browserBuiltins.hasOwnProperty(str) && str !== '') {
            this.tryFiles([browserBuiltins[str]], function () {
                _this.notFound();
            });
            return;
        }
        if (str.substring(0, 2) === './' || str.substring(0, 1) === '/' || str.substring(0, 3) === '../') {
            this.resolveFile(path.resolve(path.dirname(from.path), str));
        }
        else {
            this.resolveNodeModules(str, from);
        }
    };
    Resolver.prototype.resolveFile = function (filename, failCallback) {
        var _this = this;
        this.tryFiles([
            filename,
            filename + '.js',
            filename + '.json'
        ], function () {
            _this.resolveDirectory(filename, failCallback);
        });
    };
    Resolver.prototype.resolveDirectory = function (pathStr, failCallback) {
        var _this = this;
        if (failCallback === void 0) { failCallback = function () { return _this.notFound(); }; }
        this.parseJSONFile(path.join(pathStr, 'package.json')).then(function (json) {
            var main = json['browser'] || json['main'];
            if (main) {
                _this.tryFiles([
                    path.join(pathStr, main) + '.js',
                    path.join(pathStr, main),
                    path.join(pathStr, 'index.js')
                ], failCallback);
            }
            else {
                _this.tryFiles([
                    path.join(pathStr, 'index.js')
                ], failCallback);
            }
        }).catch(function () {
            _this.tryFiles([
                path.join(pathStr, 'index.js')
            ], failCallback);
        });
    };
    Resolver.prototype.resolveNodeModules = function (str, from) {
        var _this = this;
        var paths = this.getAllNodeModules(from.path, str);
        var tryPath = function (index) {
            var path = paths[index];
            _this.tryFiles([
                path,
                path + '.js'
            ], function () {
                _this.resolveDirectory(path, function () {
                    if (index === paths.length - 1) {
                        _this.notFound();
                    }
                    else {
                        tryPath(index + 1);
                    }
                });
            });
        };
        tryPath(0);
    };
    Resolver.prototype.getAllNodeModules = function (path, to) {
        if (this.options.modulesDirectories.length === 0)
            return [];
        var parts = path.split(/\\|\//); // '/' or '\'
        var root = -1;
        this.options.modulesDirectories.forEach(function (path) {
            var currentRoot = parts.indexOf(path);
            if (currentRoot !== -1) {
                if (root === -1) {
                    root = currentRoot;
                }
                else {
                    root = Math.min(root, currentRoot);
                }
            }
        });
        var dirs = [];
        for (var i = parts.length - 1; i >= root - 1 && i >= 0; --i) {
            if (this.options.modulesDirectories.indexOf(parts[i]) !== -1)
                continue;
            var base = parts.slice(0, i + 1).join('/');
            this.options.modulesDirectories.forEach(function (path) {
                dirs.push(base + '/' + path + '/' + to);
            });
        }
        return dirs;
    };
    Resolver.prototype.tryFiles = function (paths, failCallback) {
        var _this = this;
        if (paths.length === 0) {
            failCallback();
            return;
        }
        this.io.fileExists(paths[0]).then(function (found) {
            if (found) {
                _this._resolve(paths[0]);
            }
            else {
                _this.tryFiles(paths.slice(1), failCallback);
            }
        }).catch(function () {
            _this.tryFiles(paths.slice(1), failCallback);
        });
    };
    Resolver.prototype.notFound = function () {
        this._reject(new Error('Reference not found:\n\t' + JSON.stringify(this.str) + ' from ' + this.from.path));
    };
    Resolver.prototype.parseJSONFile = function (path) {
        return this.io.readFile(path).then(function (file) {
            return JSON.parse(file.contents.toString('utf8'));
        });
    };
    return Resolver;
}());
exports.Resolver = Resolver;
