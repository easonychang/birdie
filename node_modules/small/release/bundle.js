"use strict";
var source_map_1 = require("source-map");
var typescript = require("typescript");
function bundleFile(p, f, isMain, parameters) {
    if (isMain === void 0) { isMain = false; }
    if (parameters === void 0) { parameters = []; }
    if (f.compiled)
        return f.compiled;
    var replaces = f.rewriteData.replaces;
    parameters = f.rewriteData.closureParameters.map(function (param) { return param.name; }).concat(parameters);
    var content = [];
    var cursor = 0;
    function getPosition(index) {
        var _a = typescript.getLineAndCharacterOfPosition(f.ast, index), line = _a.line, character = _a.character;
        return {
            line: line + 1,
            column: character
        };
    }
    function addSourceText(end) {
        function addLine(lineEnd) {
            var text = f.source.substring(cursor, lineEnd);
            var _a = getPosition(cursor), line = _a.line, column = _a.column;
            content.push(new source_map_1.SourceNode(line, column, f.file.relative, text));
            cursor = lineEnd;
        }
        while (cursor < end) {
            var lineEnd = f.source.indexOf('\n', cursor);
            var sectionEnd = lineEnd === -1 ? end : Math.min(lineEnd + 1, end);
            addLine(sectionEnd);
        }
        if (cursor !== end)
            return;
    }
    function addEmptyNode() {
        var _a = getPosition(cursor), line = _a.line, column = _a.column;
        content.push(new source_map_1.SourceNode(line, column, f.file.relative));
    }
    function addGeneratedText(text) {
        content.push(new source_map_1.SourceNode(null, null, null, text));
    }
    for (var _i = 0, replaces_1 = replaces; _i < replaces_1.length; _i++) {
        var replace = replaces_1[_i];
        addSourceText(replace.pos);
        if (replace.value !== undefined) {
            var _a = getPosition(cursor), line = _a.line, column = _a.column;
            content.push(new source_map_1.SourceNode(line, column, f.file.relative, replace.value));
            addEmptyNode();
        }
        else if (replace.file !== undefined) {
            addEmptyNode();
            addGeneratedText(replace.beforeFile);
            content.push(bundleFile(p, replace.file));
            addGeneratedText(replace.afterFile);
            addEmptyNode();
        }
        cursor = replace.endpos;
    }
    addSourceText(f.source.length);
    var includeFunctionCall = !isMain && !f.hasCircularDependencies;
    // Add to top
    content.splice(0, 0, new source_map_1.SourceNode(null, null, null, '(function(' + parameters.join(', ') + ') {\n' + f.rewriteData.top + '\n'));
    // Add below file
    addGeneratedText('\n' + f.rewriteData.bottom + '\n})' + (includeFunctionCall ? '(' + getClosureParameterValues(p, f) + ')' : ''));
    f.compiled = new source_map_1.SourceNode(null, null, null, content);
    return f.compiled;
}
exports.bundleFile = bundleFile;
function getClosureParameterValues(p, f) {
    return f.rewriteData.closureParameters.map(function (param) { return param.value; }).join(', ');
}
exports.getClosureParameterValues = getClosureParameterValues;
