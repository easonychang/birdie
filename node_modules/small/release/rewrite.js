"use strict";
var ts = require("typescript");
function rewriteFile(p, f) {
    var replaces = [];
    var replace = function (ast, value) {
        replaces.push({
            pos: ast.getStart(f.ast),
            endpos: ast.getEnd(),
            value: value
        });
    };
    var top = '';
    var bottom = '';
    var closureParameters = [];
    var usesModuleExports = false;
    var usesExports = false;
    for (var _i = 0, _a = f.exportNodes; _i < _a.length; _i++) {
        var exportNode = _a[_i];
        if (exportNode.isModuleExports) {
            usesModuleExports = true;
        }
        else {
            usesExports = true;
        }
    }
    var needsTwoExportVariables = usesModuleExports && usesExports;
    var varExports = 'exports';
    var varModuleExports = p.options.varPrefix + 'moduleExports';
    if (f.isJson) {
        top = 'return (';
        bottom = ');';
    }
    else if (needsTwoExportVariables) {
        top = 'var ' + varExports + ' = {}, ' + varModuleExports + ' = ' + varExports + ';';
        bottom = 'return ' + varModuleExports + ';';
    }
    else {
        top = 'var ' + varExports + ' = {};';
        bottom = 'return ' + varExports + ';';
        varModuleExports = varExports;
    }
    if (f.hasCircularDependencies) {
        top += '\n' + f.varName + ' = function() { return ' + varExports + '; };';
        if (needsTwoExportVariables) {
            bottom = f.varName + ' = function() { return ' + varModuleExports + '; };\n' + bottom;
        }
    }
    for (var _b = 0, _c = f.exportNodes; _b < _c.length; _b++) {
        var exportNode = _c[_b];
        replace(exportNode.ast, exportNode.emit(varExports, varModuleExports));
    }
    var removedVars = [];
    var removeVar = function (declaration) {
        for (var _i = 0, removedVars_1 = removedVars; _i < removedVars_1.length; _i++) {
            var removed = removedVars_1[_i];
            if (removed.list === declaration.parent) {
                removed.removedDeclarations.push(declaration);
                return;
            }
        }
        removedVars.push({
            list: declaration.parent,
            removedDeclarations: [declaration]
        });
    };
    for (var _d = 0, _e = f.importNodes; _d < _e.length; _d++) {
        var imp = _e[_d];
        var value = imp.emit();
        if (value === '' && imp.ast.kind === ts.SyntaxKind.VariableDeclaration) {
            removeVar(imp.ast);
        }
        else {
            replace(imp.ast, value);
        }
        for (var _f = 0, _g = imp.references; _f < _g.length; _f++) {
            var reference = _g[_f];
            var value_1 = reference.emit();
            if (value_1 !== undefined) {
                replace(reference.ast, value_1);
            }
        }
    }
    ;
    for (var _h = 0, removedVars_2 = removedVars; _h < removedVars_2.length; _h++) {
        var removed = removedVars_2[_h];
        if (removed.list.declarations.length === removed.removedDeclarations.length) {
            // All declarations are removed, so we can remove the full variable statement.
            replace(removed.list, '');
        }
        else {
            for (var _j = 0, _k = removed.removedDeclarations; _j < _k.length; _j++) {
                var declaration = _k[_j];
                var index = removed.list.declarations.indexOf(declaration);
                var previous = removed.list.declarations[index - 1];
                var next = removed.list.declarations[index + 1];
                replaces.push({
                    pos: previous ? previous.end : declaration.pos,
                    endpos: next ? next.pos : declaration.end,
                    value: ''
                });
            }
        }
    }
    var childTopId = 1;
    for (var _l = 0, _m = f.structureChildren; _l < _m.length; _l++) {
        var other = _m[_l];
        var beforeFile = 'var ' + other.varName + ' = ';
        replaces.push({
            pos: 0,
            endpos: 0,
            secundarySort: childTopId++,
            beforeFile: beforeFile,
            file: other,
            afterFile: ';\n'
        });
    }
    ;
    replaces.sort(function (a, b) {
        if (a.pos === b.pos) {
            if (a.endpos === b.endpos) {
                return a.secundarySort - b.secundarySort;
            }
            else {
                return a.endpos - b.endpos;
            }
        }
        else {
            return a.pos - b.pos;
        }
    });
    f.rewriteData = {
        replaces: replaces,
        top: top,
        bottom: bottom,
        closureParameters: closureParameters
    };
}
exports.rewriteFile = rewriteFile;
