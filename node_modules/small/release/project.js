/// <reference path="../definitions/ref.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sourceMap = require("source-map");
var file = require("./file");
var events = require("events");
var parser_1 = require("./parser");
var binder_1 = require("./binder");
var resolve = require("./resolve");
var order = require("./order");
var structure = require("./structure");
var rewrite = require("./rewrite");
var bundle = require("./bundle");
var io = require("./io");
var Vinyl = require("vinyl");
var io_1 = require("./io");
var Project = (function (_super) {
    __extends(Project, _super);
    function Project(startFileName, ioHost, options) {
        if (ioHost === void 0) { ioHost = new io.NodeIO(); }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.files = [];
        _this.orderFiles = [];
        _this.failed = false;
        _this.compiled = {};
        _this.parser = new parser_1.Parser();
        _this._fileQueue = 0;
        _this.io = ioHost;
        // Default options
        if (options.alwaysLoadConditional === undefined)
            options.alwaysLoadConditional = true;
        if (options.includeNode === undefined)
            options.includeNode = false;
        if (options.modulesDirectories === undefined)
            options.modulesDirectories = ['node_modules'];
        if (options.globalModules === undefined)
            options.globalModules = {};
        // if (options.allowCircular === undefined) options.allowCircular = false;
        if (options.varPrefix === undefined)
            options.varPrefix = '__small$_';
        _this.options = options;
        _this.startFileName = startFileName;
        var i = 0;
        for (var name in options.globalModules) {
            if (!Object.prototype.hasOwnProperty.call(options.globalModules, name))
                continue;
            options.globalModules[name]._varName = options.varPrefix + 'mod_' + i;
            i++;
        }
        return _this;
    }
    Project.prototype.start = function () {
        this.startFile = this.addFile(this.startFileName);
    };
    Project.prototype.addFile = function (filename) {
        var _this = this;
        var f = new file.SourceFile(io_1.normalizePath(filename));
        f.id = this.files.length;
        f.varName = this.options.varPrefix + f.id;
        this._fileQueue++;
        this.files.push(f);
        this.io.readFile(filename).then(function (source) {
            if (_this.failed)
                return;
            f.file = source;
            f.source = source.contents.toString();
            _this.parser.parse(f);
            _this.resolveFile(f, function (err) {
                if (err) {
                    _this.emit('error', err);
                }
                else {
                    _this._fileQueue--;
                    if (_this._fileQueue === 0) {
                        _this.emit('read');
                        new binder_1.Binder(_this.files);
                        _this.generateOrder();
                        _this.generateStructure();
                        _this.rewrite();
                        _this.bundle();
                        _this.writeOutput();
                    }
                }
            });
        }).catch(function (err) {
            _this.emit('error', err);
        });
        return f;
    };
    Project.prototype.getFile = function (filename) {
        filename = io_1.normalizePath(filename);
        for (var i = 0; i < this.files.length; ++i) {
            if (this.files[i].filename === filename) {
                return this.files[i];
            }
        }
        return undefined;
    };
    Project.prototype.getOrAddFile = function (filename) {
        var f = this.getFile(filename);
        if (f) {
            return f;
        }
        else {
            return this.addFile(filename);
        }
    };
    Project.prototype.resolveFile = function (f, callback) {
        var _this = this;
        var imports = f.importNodes;
        if (imports.length === 0) {
            process.nextTick(function () {
                callback(undefined);
            });
            return;
        }
        var queue = 0;
        var done = false;
        imports.forEach(function (imp, i) {
            if (Object.prototype.hasOwnProperty.call(_this.options.globalModules, imp.relativePath)) {
                imp.targetGlobalModule = _this.options.globalModules[imp.relativePath];
            }
            else {
                queue++;
                _this.resolveSingle(f, imp.relativePath).then(function (path) {
                    imp.targetFile = _this.getOrAddFile(path);
                    queue--;
                    if (queue === 0 && !done) {
                        callback(undefined);
                        done = true;
                    }
                }).catch(function (err) {
                    _this.failed = true;
                    done = true;
                    callback(err);
                });
            }
        });
        if (queue === 0 && !done) {
            callback(undefined);
        }
    };
    Project.prototype.resolveSingle = function (f, str) {
        return resolve.resolve(this, f.file, str);
    };
    Project.prototype.generateOrder = function () {
        order.generateOrder(this);
        this.emit('generatedOrder');
    };
    Project.prototype.generateStructure = function () {
        structure.generateStructure(this);
        this.emit('generatedStructure');
    };
    Project.prototype.rewrite = function () {
        var _this = this;
        this.files.forEach(function (f) {
            rewrite.rewriteFile(_this, f);
        });
        this.emit('rewritten');
    };
    Project.prototype.bundle = function () {
        var _this = this;
        // Convert Dictionary to Array
        var globalModules = Object.keys(this.options.globalModules).map(function (key) { return _this.options.globalModules[key]; });
        var compiled = bundle.bundleFile(this, this.startFile, true, globalModules.map(function (mod) { return mod._varName; }));
        var standaloneDeps = globalModules.map(function (mod) { return mod.standalone || mod.universal; }).join(', ');
        var amdDeps = globalModules.map(function (mod) { return JSON.stringify(mod.amd || mod.universal); }).join(', ');
        var commonjsDeps = globalModules.map(function (mod) { return 'require(' + JSON.stringify(mod.amd || mod.universal) + ')'; }).join(', ');
        if (!this.options.exportPackage)
            this.options.exportPackage = {};
        var wrap = function (header, bottom) {
            return new sourceMap.SourceNode(null, null, null, [
                header,
                compiled,
                bottom
            ]);
        };
        if (this.options.exportPackage.standalone !== undefined) {
            var header = this.options.exportPackage.standalone + ' = ';
            /* this.compiled.standalone = this.options.exportPackage.standalone
                + ' = '
                + code
                + '(' + standaloneDeps + ');'; */
            if (this.options.exportPackage.standalone.indexOf('.') === -1) {
                header = 'var ' + header;
            }
            this.compiled.standalone = wrap(header, '(' + standaloneDeps + ');');
        }
        else {
            this.compiled.standalone = wrap('', '(' + standaloneDeps + ');');
        }
        if (this.options.exportPackage.amd === undefined || this.options.exportPackage.amd === '') {
            this.compiled.amd = wrap('define([' + amdDeps + '], ', ');');
        }
        else {
            this.compiled.amd = wrap('define(' + JSON.stringify(this.options.exportPackage.amd) + ', [' + amdDeps + '], ', ');');
        }
        this.compiled.commonjs = wrap('module.exports = ', '(' + commonjsDeps + ');');
        if (this.options.exportPackage.universal !== undefined) {
            var universalAMD = this.options.exportPackage.universal;
            var universalCommonjs = this.options.exportPackage.universal;
            var universalStandalone = this.options.exportPackage.universal;
            if (this.options.exportPackage.universal === '') {
                universalAMD = this.options.exportPackage.amd;
                universalCommonjs = this.options.exportPackage.commonjs;
                universalStandalone = this.options.exportPackage.standalone;
            }
            this.compiled.universal = wrap(
            // Header
            '(function(__root, __factory) { if (typeof define === "function" && define.amd) { '
                + 'define(' + JSON.stringify(universalAMD) + ', [' + amdDeps + '], __factory);'
                + '} else if (typeof exports === "object") {'
                + 'module.exports = __factory(' + commonjsDeps + ');'
                + '} else {'
                + '__root[' + JSON.stringify(universalStandalone) + '] = __factory(' + standaloneDeps + ');'
                + '}'
                + '})(this, ', 
            // Bottom
            ');');
        }
        else {
            this.compiled.universal = wrap(
            // Header
            '(function(__root, __factory) { if (typeof define === "function" && define.amd) { '
                + 'define([' + amdDeps + '], __factory);'
                + '} else if (typeof exports === "object") {'
                + '__factory(' + commonjsDeps + ');'
                + '} else {'
                + '__factory(' + standaloneDeps + ');'
                + '}'
                + '})(this, ', 
            // Bottom
            ');');
        }
        this.emit('bundled');
    };
    Project.prototype.writeOutput = function () {
        var _this = this;
        if (this.options.outputFileName === undefined || this.options.outputFileName === null)
            return; // No output
        var queue = 0;
        var output = function (filename, content) {
            var _a = content.toStringWithSourceMap(), code = _a.code, map = _a.map;
            code += '\n';
            if (_this.io.includeSourceMapComment) {
                code += "//# sourceMappingURL=" + filename + ".map\n";
            }
            var codeFile = new Vinyl({
                path: filename,
                cwd: _this.startFile.file.cwd,
                contents: new Buffer(code)
            });
            var mapFile = new Vinyl({
                path: filename + '.map',
                cwd: _this.startFile.file.cwd,
                contents: new Buffer(map.toString())
            });
            queue++;
            _this.io.writeFile(codeFile, mapFile).then(function () {
                queue--;
                process.nextTick(function () {
                    if (queue === 0)
                        _this.emit('written');
                });
            }).catch(function (err) {
                _this.emit('error', err);
            });
        };
        if (this.options.outputFileName.amd) {
            output(this.options.outputFileName.amd, this.compiled.amd);
        }
        if (this.options.outputFileName.commonjs) {
            output(this.options.outputFileName.commonjs, this.compiled.commonjs);
        }
        if (this.options.outputFileName.standalone) {
            output(this.options.outputFileName.standalone, this.compiled.standalone);
        }
        if (this.options.outputFileName.universal) {
            output(this.options.outputFileName.universal, this.compiled.universal);
        }
    };
    return Project;
}(events.EventEmitter));
exports.Project = Project;
